Proszę zaimplementować szablon klasy PriorityQueue<K, V> realizujący strukturę
danych umożliwiającą wykonywanie następujących operacji (w nawiasach
kwadratowych podana jest maksymalna wymagana złożoność czasowa).

// Konstruktor bezparametrowy tworzący pustą kolejkę [O(1)]
PriorityQueue()

// Konstruktor kopiujący [O(queue.size())]
PriorityQueue(const PriorityQueue<K, V>& queue)

// Konstruktor przenoszący [O(1)]
PriorityQueue(PriorityQueue<K, V>&& queue)

// Operator przypisania [O(queue.size()) dla użycia P = Q, a O(1) dla użycia
// P = move(Q)]
PriorityQueue<K, V>& operator=(PriorityQueue<K, V> queue)

// Metoda zwracająca true wtedy i tylko wtedy, gdy kolejka jest pusta [O(1)]
bool empty() const

// Metoda zwracająca liczbę par (klucz, wartość) przechowywanych w kolejce
// [O(1)]
size_type size() const

// Metoda wstawiająca do kolejki parę o kluczu key i wartości value
// [O(log size())] (dopuszczamy możliwość występowania w kolejce wielu
// par o tym samym kluczu)
void insert(const K& key, const V& value)

// Metody zwracające odpowiednio najmniejszą i największą wartość przechowywaną
// w kolejce [O(1)]; w przypadku wywołania którejś z tych metod na pustej
// strukturze powinien zostać zgłoszony wyjątek PriorityQueueEmptyException
const V& minValue() const
const V& maxValue() const

// Metody zwracające klucz o przypisanej odpowiednio najmniejszej lub
// największej wartości [O(1)]; w przypadku wywołania którejś z tych metod
// na pustej strukturze powinien zostać zgłoszony wyjątek
// PriorityQueueEmptyException
const K& minKey() const
const K& maxKey() const

// Metody usuwające z kolejki jedną parę o odpowiednio najmniejszej lub
// największej wartości [O(log size())]
void deleteMin()
void deleteMax()

// Metoda zmieniająca dotychczasową wartość przypisaną kluczowi key na nową
// wartość value [O(log size())]; w przypadku gdy w kolejce nie ma pary
// o kluczu key, powinien zostać zgłoszony wyjątek
// PriorityQueueNotFoundException(); w przypadku kiedy w kolejce jest kilka par
// o kluczu key, zmienia wartość w dowolnie wybranej parze o podanym kluczu
void changeValue(const K& key, const V& value)

// Metoda scalająca zawartość kolejki z podaną kolejką queue; ta operacja usuwa
// wszystkie elementy z kolejki queue i wstawia je do kolejki *this
// [O(size() + queue.size() * log (queue.size() + size()))]
void merge(PriorityQueue<K, V>& queue)

// Metoda zamieniającą zawartość kolejki z podaną kolejką queue (tak jak
// większość kontenerów w bibliotece standardowej) [O(1)]
void swap(PriorityQueue<K, V>& queue)

Klasa PriorityQueue<K, V> powinna zawierać publiczne definicje typów
reprezentujących rozmiar oraz przechowywane klucze i wartości, o nazwach
odpowiednio: size_type, key_type, value_type.

Ponadto powinny być możliwe globalne operacje:

- swap: przyjmujący dwie kolejki i zamieniający ich zawartość miejscami,
- Porównania: ==, !=,
- Porównania leksykograficzne kolejek <, >, <=, >=.

Klasa PriorityQueue<K, V> nie może przechowywać w pamięci więcej niż jednej
kopii pary o ustalonym kluczu i wartości. To znaczy, że w kolejce może być
więcej niż jedna para o takim samym kluczu i wartości, ale implementacja ma
gwarantować trzymanie tylko jednej kopii każdej takiej pary. W tekście
źródłowym należy udokumentować złożoność poszczególnych operacji.

Wymagania niefunkcjonalne i wskazówki:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Istotą zadania jest zapewnienie najwyższego możliwego poziomu ODPORNOŚCI na
  wyjątki dla każdej z operacji na kolejce, bez utraty OBOJĘTNOŚCI na wyjątki
  (patrz kolejny punkt) oraz bez nakładania żadnych wymagań na typy K i V
  w kwestii zgłaszanych przez nie wyjątków (oczywiście poza podstawowym
  wymaganiem, jakie zakładają również kontenery z biblioteki standardowej,
  zabraniającym zgłaszać wyjątki z destruktora). W szczególności oznacza to, że
  wszystkie operacje na naszej kolejce mają zapewniać silną gwarancję, a tam,
  gdzie jest to sensowne i możliwe, dodatkowo gwarancję no-throw (no-throw
  wymagane jest przede wszystkim dla operacji swap).

* Kolejka powinna być OBOJĘTNA na wyjątki, co oznacza, że jeśli pojawi się
  jakikolwiek wyjątek, powinien on być propagowany "na zewnątrz"
  (w szczególności oznacza to, że wszelkie wyjątki zgłoszone przez typy K i V
  powinny być propagowane na zewnątrz).

* Do implementacji struktury można (a nawet zaleca się) użyć stosownych
  kontenerów z biblioteki standardowej, jednocześnie polegając na ich
  odporności na wyjątki. Proszę przyjąć, że używamy implementacji STL, w której
  gwarancja odporności wygląda tak, jak opisał to B. Stroustrup w swojej
  książce (patrz czytanki). W innych dołączonych do tematu czytankach również
  można znaleźć pomocne informacje o wyjątkach w STL.

* Konstruktor domyślny, kopiujący i przenoszący w kontenerach STL zapewniają
  silną gwarancję.

* Operator przypisania zapewnia podstawową gwarancję, a w zadaniu wymagamy
  silnej!

* Wszelkie metody w standardowych kontenerach zadeklarowane jako const dają
  silną gwarancję.

* W podlinkowanym dodatku do książki B. Stroustrupa, a konkretnie w tabelce
  mówiącej o gwarancji poszczególnych operacji w podstawowych kontenerach,
  można by dodać kolumny set i multiset, które byłyby takie same jak dla map.

* Pod tym samym odnośnikiem znajdziemy informację, że metoda erase zapewnia
  gwarancję no-throw, jednak trzeba mieć na uwadze, że chodzi o wersję
  przyjmującą iteratory (wersja przyjmująca wartość do usunięcia musi najpierw
  wyszukać tę wartość w kontenerze, a zatem musi wykorzystać operator
  porównania, który MOŻE ZGŁOSIĆ wyjątek).

* Pod tym samym odnośnikiem możemy zauważyć, że metoda swap dla map, set,
  multiset itp. zapewnia gwarancję no-throw, gdy copy-of-comparison nie zgłasza
  wyjątku, zatem mamy gwarancję no-throw, o ile dla standardowego kontenera nie
  zdefiniujemy własnego funktora Compare, który wymienionej gwarancji nie daje.

Przykład użycia:

#include <iostream>
#include <exception>
#include <cassert>

#include "priorityqueue.hh"

PriorityQueue<int, int> f(PriorityQueue<int, int> q)
{
    return q;
}

int main() {
    PriorityQueue<int, int> P = f(PriorityQueue<int, int>());
    assert(P.empty());

    P.insert(1, 42);
    P.insert(2, 13);

    assert(P.size() == 2);
    assert(P.maxKey() == 1);
    assert(P.maxValue() == 42);
    assert(P.minKey() == 2);
    assert(P.minValue() == 13);

    PriorityQueue<int, int> Q(f(P));

    Q.deleteMax();
    Q.deleteMin();
    Q.deleteMin();

    assert(Q.empty());

    PriorityQueue<int, int> R(Q);

    R.insert(1, 100);
    R.insert(2, 100);
    R.insert(3, 300);

    PriorityQueue<int, int> S;
    S = R;

    try
    {
        S.changeValue(4, 400);
    }
    catch (const PriorityQueueNotFoundException& pqnfex)
    {
        std::cout << pqnfex.what() << std::endl;
    }
    catch (...)
    {
        assert(!"exception missing!");
    }

    S.changeValue(2, 200);

    try
    {
        while (true)
        {
            std::cout << S.minValue() << std::endl;
            S.deleteMin();
        }
        assert(!"S.minValue() on empty S did not throw!");
    }
    catch (const PriorityQueueEmptyException& pqeex)
    {
        std::cout << pqeex.what() << std::endl;
    }
    catch (...)
    {
        assert(!"exception missing!");
    }

    try
    {
        S.minKey();
        assert(!"S.minKey() on empty S did not throw!");
    }
    catch (const std::exception& ex)
    {
        std::cout << ex.what() << std::endl;
    }
    catch (...)
    {
        assert(!"exception missing!");
    }

    PriorityQueue<int, int> T;
    T.insert(1, 1);
    T.insert(2, 4);
    S.insert(3, 9);
    S.insert(4, 16);
    S.merge(T);
    assert(S.size() == 4);
    assert(S.minValue() == 1);
    assert(S.maxValue() == 16);
    assert(T.empty());

    S = R;
    swap(R, T);
    assert(T == S);
    assert(T != R);

    R = std::move(S);
    assert(T != S);
    assert(T == R);

    std::cout << "ALL OK!" << std::endl;

    return 0;
}

UWAGA! Każda implementacja PriorityQueue<K, V> zostanie sprawdzona zestawem
testów z typami, które np. zgłaszają wyjątki ze swoich metod, operatorów itd.
(oczywiście poza destruktorem). Symulowane będą też niepowodzenia w alokacji
pamięci (bad_alloc). Przejście tych testów będzie podstawą do zaliczenia.
Warto zatem spróbować samemu zasymulować takie warunki. Wskazówka, jak to
zrobić, znajduje się w jednej z obowiązkowych czytanek.

Ustalenia techniczne
^^^^^^^^^^^^^^^^^^^^
Jako rozwiązanie należy dostarczyć plik priorityqueue.hh.
Plik ten należy umieścić w repozytorium w katalogu

grupaN/zadanie5/ab123456+cd123456

lub

grupaN/zadanie5/ab123456+cd123456+ef123456

gdzie N jest numerem grupy, a ab123456, cd123456, ef123456 są identyfikatorami
członków zespołu umieszczającego to rozwiązanie. Katalog z rozwiązaniem nie
powinien zawierać innych plików, ale może zawierać podkatalog private, gdzie
można umieszczać różne pliki, np. swoje testy. Pliki umieszczone w tym
podkatalogu nie będą oceniane.
